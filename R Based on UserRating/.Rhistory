recom_list[]
recom_list[[1]]
toJSON(recom_list[[1]])
recom <- predict(recommender_model, ratingmat[1],n=10)
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
toJSON(recom_list[[1]])
recom <- predict(recommender_model, ratingmat[1],n=5)
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
toJSON(recom_list[[1]])
library(reshape2)
library(recommenderlab)
library(RMySQL)
library(jsonlite)
# MySQL DataBase Connection
connection = dbConnect(MySQL(), user='root', password='root', host='localhost', dbname="aasha")
#Reading Paper & Rating table from the database
rs <- dbSendQuery(con, "SELECT * FROM rating")
rating.table<-dbFetch(rs,n=-1)
rs <- dbSendQuery(con, "SELECT * FROM paper")
paper.table<-dbFetch(rs,n=-1)
# Closing the MySQL Connection
dbDisconnect(con)
rating <- rating.table
paper <- paper.table
#Create ratings matrix. Rows = UserID, Columns = PaperID
ratingmat <- dcast(rating, UserID~PaperID, value.var = "rating", na.rm=FALSE)
ratingmat <- as.matrix(ratingmat[,-1]) #remove userIds
#Convert rating matrix into a recommenderlab sparse matrix
ratingmat <- as(ratingmat, "realRatingMatrix")
#Normalize the data
ratingmat_norm <- normalize(ratingmat)
#Create Recommender Model. "UBCF" stands for User-Based Collaborative Filtering
recommender_model <- Recommender(ratingmat, method = "POPULAR")#, param=list(method="Cosine",nn=30))
summary(recommender_model)
recom <- predict(recommender_model, ratingmat[1],n=5)
#Obtain top 10 recommendations for 1st user in dataset
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
print(toJSON(recom_list[[1]]))
library(reshape2)
library(recommenderlab)
library(RMySQL)
library(jsonlite)
# MySQL DataBase Connection
connection = dbConnect(MySQL(), user='root', password='root', host='localhost', dbname="aasha")
#Reading Paper & Rating table from the database
rs <- dbSendQuery(con, "SELECT * FROM rating")
rating.table<-dbFetch(rs,n=-1)
rs <- dbSendQuery(con, "SELECT * FROM paper")
paper.table<-dbFetch(rs,n=-1)
# Closing the MySQL Connection
dbDisconnect(con)
rating <- rating.table
paper <- paper.table
#Create ratings matrix. Rows = UserID, Columns = PaperID
ratingmat <- dcast(rating, UserID~PaperID, value.var = "rating", na.rm=FALSE)
ratingmat <- as.matrix(ratingmat[,-1]) #remove userIds
#Convert rating matrix into a recommenderlab sparse matrix
ratingmat <- as(ratingmat, "realRatingMatrix")
#Normalize the data
ratingmat_norm <- normalize(ratingmat)
#Create Recommender Model. "UBCF" stands for User-Based Collaborative Filtering
recommender_model <- Recommender(ratingmat, method = "POPULAR")#, param=list(method="Cosine",nn=30))
summary(recommender_model)
recom <- predict(recommender_model, ratingmat[10],n=5)
#Obtain top 10 recommendations for 1st user in dataset
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
print(toJSON(recom_list[[1]]))
library(reshape2)
library(recommenderlab)
library(RMySQL)
library(jsonlite)
# MySQL DataBase Connection
connection = dbConnect(MySQL(), user='root', password='root', host='localhost', dbname="aasha")
#Reading Paper & Rating table from the database
rs <- dbSendQuery(con, "SELECT * FROM rating")
rating.table<-dbFetch(rs,n=-1)
rs <- dbSendQuery(con, "SELECT * FROM paper")
paper.table<-dbFetch(rs,n=-1)
# Closing the MySQL Connection
dbDisconnect(con)
rating <- rating.table
paper <- paper.table
#Create ratings matrix. Rows = UserID, Columns = PaperID
ratingmat <- dcast(rating, UserID~PaperID, value.var = "rating", na.rm=FALSE)
ratingmat <- as.matrix(ratingmat[,-1]) #remove userIds
#Convert rating matrix into a recommenderlab sparse matrix
ratingmat <- as(ratingmat, "realRatingMatrix")
#Normalize the data
ratingmat_norm <- normalize(ratingmat)
#Create Recommender Model. "UBCF" stands for User-Based Collaborative Filtering
recommender_model <- Recommender(ratingmat, method = "POPULAR")#, param=list(method="Cosine",nn=30))
summary(recommender_model)
recom <- predict(recommender_model, ratingmat[15],n=5)
#Obtain top 10 recommendations for 1st user in dataset
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
print(toJSON(recom_list[[1]]))
write.csv("a.csv",x=recom_list)
.libPaths("packrat/lib/x86_64-pc-linux-gnu/3.3.3")
require(reshape2)
require(recommenderlab)
require(RMySQL)
require(jsonlite)
# MySQL DataBase Connection
connection = dbConnect(MySQL(), user='root', password='root', host='localhost', dbname="aasha")
#Reading Paper & Rating table from the database
rs <- dbSendQuery(connection, "SELECT * FROM rating")
rating.table<-dbFetch(rs,n=-1)
rs <- dbSendQuery(connection, "SELECT * FROM paper")
paper.table<-dbFetch(rs,n=-1)
# Closing the MySQL Connection
dbDisconnect(connection)
rating <- rating.table
paper <- paper.table
#Create ratings matrix. Rows = UserID, Columns = PaperID
ratingmat <- dcast(rating, UserID~PaperID, value.var = "rating", na.rm=FALSE)
ratingmat <- as.matrix(ratingmat[,-1]) #remove userIds
#Convert rating matrix into a recommenderlab sparse matrix
ratingmat <- as(ratingmat, "realRatingMatrix")
#Normalize the data
ratingmat_norm <- normalize(ratingmat)
#Create Recommender Model. using POPULAR Algorithm
recommender_model <- Recommender(ratingmat, method = "POPULAR")#, param=list(method="Cosine",nn=30))
recom <- predict(recommender_model, ratingmat[1],n=5)
#Obtain top 10 recommendations for 1st user in dataset
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
return(toJSON(recom_list[[1]]))
write.csv("a.csv",x=recom_list)
.libPaths("packrat/lib/x86_64-pc-linux-gnu/3.3.3")
require(reshape2)
require(recommenderlab)
require(RMySQL)
require(jsonlite)
# MySQL DataBase Connection
connection = dbConnect(MySQL(), user='root', password='root', host='localhost', dbname="aasha")
#Reading Paper & Rating table from the database
rs <- dbSendQuery(connection, "SELECT * FROM rating")
rating.table<-dbFetch(rs,n=-1)
rs <- dbSendQuery(connection, "SELECT * FROM paper")
paper.table<-dbFetch(rs,n=-1)
# Closing the MySQL Connection
dbDisconnect(connection)
rating <- rating.table
paper <- paper.table
#Create ratings matrix. Rows = UserID, Columns = PaperID
ratingmat <- dcast(rating, UserID~PaperID, value.var = "rating", na.rm=FALSE)
ratingmat <- as.matrix(ratingmat[,-1]) #remove userIds
#Convert rating matrix into a recommenderlab sparse matrix
ratingmat <- as(ratingmat, "realRatingMatrix")
#Normalize the data
ratingmat_norm <- normalize(ratingmat)
#Create Recommender Model. using POPULAR Algorithm
recommender_model <- Recommender(ratingmat, method = "POPULAR")#, param=list(method="Cosine",nn=30))
recom <- predict(recommender_model, ratingmat[1],n=5)
#Obtain top 10 recommendations for 1st user in dataset
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
print(toJSON(recom_list[[1]]))
write.csv("a.csv",x=recom_list)
print(2+4)
.libPaths("packrat/lib/x86_64-pc-linux-gnu/3.3.3")
require(reshape2)
require(recommenderlab)
require(RMySQL)
require(jsonlite)
print (1)
.libPaths("packrat/lib/x86_64-pc-linux-gnu/3.3.3")
require(reshape2)
require(recommenderlab)
require(RMySQL)
require(jsonlite)
# MySQL DataBase Connection
connection = dbConnect(MySQL(), user='root', password='root', host='localhost', dbname="aasha")
#Reading Paper & Rating table from the database
rs <- dbSendQuery(connection, "SELECT * FROM rating")
rating.table<-dbFetch(rs,n=-1)
rs <- dbSendQuery(connection, "SELECT * FROM paper")
paper.table<-dbFetch(rs,n=-1)
# Closing the MySQL Connection
dbDisconnect(connection)
print (1)
.libPaths("packrat/lib/x86_64-pc-linux-gnu/3.3.3")
require(reshape2)
require(recommenderlab)
require(RMySQL)
# MySQL DataBase Connection
connection = dbConnect(MySQL(), user='root', password='root', host='localhost', dbname="aasha")
#Reading Paper & Rating table from the database
rs <- dbSendQuery(connection, "SELECT * FROM rating")
rating.table<-dbFetch(rs,n=-1)
rs <- dbSendQuery(connection, "SELECT * FROM paper")
paper.table<-dbFetch(rs,n=-1)
# Closing the MySQL Connection
dbDisconnect(connection)
rating <- rating.table
paper <- paper.table
#Create ratings matrix. Rows = UserID, Columns = PaperID
ratingmat <- dcast(rating, UserID~PaperID, value.var = "rating", na.rm=FALSE)
ratingmat <- as.matrix(ratingmat[,-1]) #remove userIds
#Convert rating matrix into a recommenderlab sparse matrix
ratingmat <- as(ratingmat, "realRatingMatrix")
#Normalize the data
ratingmat_norm <- normalize(ratingmat)
#Create Recommender Model. using POPULAR Algorithm
recommender_model <- Recommender(ratingmat, method = "POPULAR")#, param=list(method="Cosine",nn=30))
.libPaths("packrat/lib/x86_64-pc-linux-gnu/3.3.3")
require(reshape2)
require(recommenderlab)
require(RMySQL)
# MySQL DataBase Connection
connection = dbConnect(MySQL(), user='root', password='root', host='localhost', dbname="aasha")
#Reading Paper & Rating table from the database
rs <- dbSendQuery(connection, "SELECT * FROM rating")
rating.table<-dbFetch(rs,n=-1)
rs <- dbSendQuery(connection, "SELECT * FROM paper")
paper.table<-dbFetch(rs,n=-1)
# Closing the MySQL Connection
dbDisconnect(connection)
rating <- rating.table
paper <- paper.table
#Create ratings matrix. Rows = UserID, Columns = PaperID
ratingmat <- dcast(rating, UserID~PaperID, value.var = "rating", na.rm=FALSE)
ratingmat <- as.matrix(ratingmat[,-1]) #remove userIds
#Convert rating matrix into a recommenderlab sparse matrix
ratingmat <- as(ratingmat, "realRatingMatrix")
#Normalize the data
ratingmat_norm <- normalize(ratingmat)
#Create Recommender Model. using POPULAR Algorithm
recommender_model <- Recommender(ratingmat, method = "POPULAR")#, param=list(method="Cosine",nn=30))
save.image("RecommendationEngine.Rdata")
#
#recom <- predict(recommender_model, ratingmat[1],n=5)
#Obtain top 10 recommendations for 1st user in dataset
#recom_list <- as(recom, "list") #convert recommenderlab object to readable list
#print(toJSON(recom_list[[1]]))
#write.csv("a.csv",x=recom_list)
load("RecommendationEngine.Rdata")
recom <- predict(recommender_model, ratingmat[1],n=5)  #Obtain top 5 recommendations for a given userid
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
print(toJSON(recom_list[[1]]))
.libPaths("packrat/lib/x86_64-pc-linux-gnu/3.3.3")
require(jsonlite)
load("RecommendationEngine.Rdata")
recom <- predict(recommender_model, ratingmat[1],n=5)  #Obtain top 5 recommendations for a given userid
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
print(toJSON(recom_list[[1]]))
#write.csv("a.csv",x=recom_list)
.libPaths("packrat/lib/x86_64-pc-linux-gnu/3.3.3")
require(reshape2)
require(recommenderlab)
require(RMySQL)
# MySQL DataBase Connection
connection = dbConnect(MySQL(), user='root', password='root', host='localhost', dbname="aasha")
#Reading Paper & Rating table from the database
rs <- dbSendQuery(connection, "SELECT * FROM rating")
rating.table<-dbFetch(rs,n=-1)
rs <- dbSendQuery(connection, "SELECT * FROM paper")
paper.table<-dbFetch(rs,n=-1)
# Closing the MySQL Connection
dbDisconnect(connection)
rating <- rating.table
paper <- paper.table
#Create ratings matrix. Rows = UserID, Columns = PaperID
ratingmat <- dcast(rating, UserID~PaperID, value.var = "rating", na.rm=FALSE)
ratingmat <- as.matrix(ratingmat[,-1]) #remove userIds
#Convert rating matrix into a recommenderlab sparse matrix
ratingmat <- as(ratingmat, "realRatingMatrix")
#Normalize the data
ratingmat_norm <- normalize(ratingmat)
#Create Recommender Model. using POPULAR Algorithm
recommender_model <- Recommender(ratingmat, method = "POPULAR")#, param=list(method="Cosine",nn=30))
save.image(file="RecommendationEngine.rda")
#
#recom <- predict(recommender_model, ratingmat[1],n=5)
#Obtain top 10 recommendations for 1st user in dataset
#recom_list <- as(recom, "list") #convert recommenderlab object to readable list
#print(toJSON(recom_list[[1]]))
#write.csv("a.csv",x=recom_list)
load("RecommendationEngine.rda")
recom <- predict(recommender_model, ratingmat[1],n=5)  #Obtain top 5 recommendations for a given userid
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
print(toJSON(recom_list[[1]]))
require(reshape2)
require(recommenderlab)
load("RecommendationEngine.rda")
print(rating)
#recom <- predict(recommender_model, ratingmat[1],n=5)  #Obtain top 5 recommendations for a given userid
#recom_list <- as(recom, "list") #convert recommenderlab object to readable list
#print(toJSON(recom_list[[1]]))
print(recommender_model)
ratingmat[1,]
ratingmat[1]
predict(recommender_model, ratingmat[1],n=5)
predict(recommender_model, ratingmat[1],n=5)
ratingmat
paper
.libPaths("packrat/lib/x86_64-pc-linux-gnu/3.3.3")
require(reshape2)
require(recommenderlab)
require(RMySQL)
# MySQL DataBase Connection
connection = dbConnect(MySQL(), user='root', password='root', host='localhost', dbname="aasha")
#Reading Paper & Rating table from the database
rs <- dbSendQuery(connection, "SELECT * FROM rating")
rating.table<-dbFetch(rs,n=-1)
rs <- dbSendQuery(connection, "SELECT * FROM paper")
paper.table<-dbFetch(rs,n=-1)
# Closing the MySQL Connection
dbDisconnect(connection)
rating <- rating.table
paper <- paper.table
#Create ratings matrix. Rows = UserID, Columns = PaperID
ratingmat <- dcast(rating, UserID~PaperID, value.var = "rating", na.rm=FALSE)
ratingmat <- as.matrix(ratingmat[,-1]) #remove userIds
ratingmat
ratingmat<-sapply(data.frame(ratingmat),as.numeric)
.libPaths("packrat/lib/x86_64-pc-linux-gnu/3.3.3")
require(reshape2)
require(recommenderlab)
require(RMySQL)
# MySQL DataBase Connection
connection = dbConnect(MySQL(), user='root', password='root', host='localhost', dbname="aasha")
#Reading Paper & Rating table from the database
rs <- dbSendQuery(connection, "SELECT * FROM rating")
rating.table<-dbFetch(rs,n=-1)
rs <- dbSendQuery(connection, "SELECT * FROM paper")
paper.table<-dbFetch(rs,n=-1)
# Closing the MySQL Connection
dbDisconnect(connection)
rating <- rating.table
paper <- paper.table
#Create ratings matrix. Rows = UserID, Columns = PaperID
ratingmat <- dcast(rating, UserID~PaperID, value.var = "rating", na.rm=FALSE)
ratingmat <- as.matrix(ratingmat[,-1]) #remove userIds
ratingmat<-sapply(data.frame(ratingmat),as.numeric)
#Convert rating matrix into a recommenderlab sparse matrix
ratingmat <- as(ratingmat, "realRatingMatrix")
#Normalize the data
ratingmat_norm <- normalize(ratingmat)
#Create Recommender Model. using POPULAR Algorithm
recommender_model <- Recommender(ratingmat, method = "POPULAR")#, param=list(method="Cosine",nn=30))
save.image(file="RecommendationEngine.rda")
#
#recom <- predict(recommender_model, ratingmat[1],n=5)
#Obtain top 10 recommendations for 1st user in dataset
#recom_list <- as(recom, "list") #convert recommenderlab object to readable list
#print(toJSON(recom_list[[1]]))
#write.csv("a.csv",x=recom_list)
View(rating.table)
getwd()
setwd("/var/www/html/aasha/R")
.libPaths("packrat/lib/x86_64-pc-linux-gnu/3.3.3")
require(reshape2)
require(recommenderlab)
require(RMySQL)
# MySQL DataBase Connection
connection = dbConnect(MySQL(), user='root', password='root', host='localhost', dbname="aasha")
#Reading Paper & Rating table from the database
rs <- dbSendQuery(connection, "SELECT * FROM rating")
rating.table<-dbFetch(rs,n=-1)
rs <- dbSendQuery(connection, "SELECT * FROM paper")
paper.table<-dbFetch(rs,n=-1)
# Closing the MySQL Connection
dbDisconnect(connection)
rating <- rating.table
paper <- paper.table
#Create ratings matrix. Rows = UserID, Columns = PaperID
ratingmat <- dcast(rating, UserID~PaperID, value.var = "rating", na.rm=FALSE)
ratingmat <- as.matrix(ratingmat[,-1]) #remove userIds
ratingmat<-sapply(data.frame(ratingmat),as.numeric)
#Convert rating matrix into a recommenderlab sparse matrix
ratingmat <- as(ratingmat, "realRatingMatrix")
#Normalize the data
ratingmat_norm <- normalize(ratingmat)
#Create Recommender Model. using POPULAR Algorithm
recommender_model <- Recommender(ratingmat, method = "POPULAR")#, param=list(method="Cosine",nn=30))
save.image(file="RecommendationEngine.rda")
#
#recom <- predict(recommender_model, ratingmat[1],n=5)
#Obtain top 10 recommendations for 1st user in dataset
#recom_list <- as(recom, "list") #convert recommenderlab object to readable list
#print(toJSON(recom_list[[1]]))
#write.csv("a.csv",x=recom_list)
setwd("/var/www/html/aasha/R")
.libPaths("packrat/lib/x86_64-pc-linux-gnu/3.3.3")
require(reshape2);
require(recommenderlab);
load("RecommendationEngine.rda");
print(ratingmat)
recom=predict(recommender_model, ratingmat[1],n=5)
setwd("/var/www/html/aasha/R")
.libPaths("packrat/lib/x86_64-pc-linux-gnu/3.3.3")
require(reshape2)
require(recommenderlab)
require(RMySQL)
# MySQL DataBase Connection
connection = dbConnect(MySQL(), user='root', password='root', host='localhost', dbname="aasha")
#Reading Paper & Rating table from the database
rs <- dbSendQuery(connection, "SELECT * FROM rating")
rating.table<-dbFetch(rs,n=-1)
rs <- dbSendQuery(connection, "SELECT * FROM paper")
paper.table<-dbFetch(rs,n=-1)
# Closing the MySQL Connection
dbDisconnect(connection)
rating <- rating.table
paper <- paper.table
ratingmat <- as.dcast(rating, UserID~PaperID, value.var = "rating", na.rm=FALSE)
ratingmat <- adcast(rating, UserID~PaperID, value.var = "rating", na.rm=FALSE)
ratingmat <- cast(rating, UserID~PaperID, value.var = "rating", na.rm=FALSE)
ratingmat <- dcast(rating, UserID~PaperID, value.var = "rating", na.rm=FALSE)
print(toJSON(recom_list[[1]]))
setwd("/var/www/html/aasha/R")
.libPaths("packrat/lib/x86_64-pc-linux-gnu/3.3.3")
require(reshape2)
require(recommenderlab)
require(RMySQL)
require(jsonlite)
# MySQL DataBase Connection
connection = dbConnect(MySQL(), user='root', password='root', host='localhost', dbname="aasha")
#Reading Paper & Rating table from the database
rs <- dbSendQuery(connection, "SELECT * FROM rating")
rating.table<-dbFetch(rs,n=-1)
rs <- dbSendQuery(connection, "SELECT * FROM paper")
paper.table<-dbFetch(rs,n=-1)
# Closing the MySQL Connection
dbDisconnect(connection)
rating <- rating.table
paper <- paper.table
#Create ratings matrix. Rows = UserID, Columns = PaperID
ratingmat <- dcast(rating, UserID~PaperID, value.var = "rating", na.rm=FALSE)
ratingmat <- as.matrix(ratingmat[,-1]) #remove userIds
ratingmat<-sapply(data.frame(ratingmat),as.numeric)
#Convert rating matrix into a recommenderlab sparse matrix
ratingmat <- as(ratingmat, "realRatingMatrix")
#Normalize the data
ratingmat_norm <- normalize(ratingmat)
#Create Recommender Model. using POPULAR Algorithm
recommender_model <- Recommender(ratingmat, method = "POPULAR")#, param=list(method="Cosine",nn=30))
#save.image(file="RecommendationEngine.rda")
#
recom <- predict(recommender_model, ratingmat[1],n=5)
#Obtain top 10 recommendations for 1st user in dataset
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
print(toJSON(recom_list[[1]]))
setwd("/var/www/html/aasha/R")
.libPaths("packrat/lib/x86_64-pc-linux-gnu/3.3.3")
require(reshape2)
require(recommenderlab)
require(RMySQL)
require(jsonlite)
# MySQL DataBase Connection
connection = dbConnect(MySQL(), user='root', password='root', host='localhost', dbname="aasha")
#Reading Paper & Rating table from the database
rs <- dbSendQuery(connection, "SELECT * FROM rating")
rating.table<-dbFetch(rs,n=-1)
rs <- dbSendQuery(connection, "SELECT * FROM paper")
paper.table<-dbFetch(rs,n=-1)
# Closing the MySQL Connection
dbDisconnect(connection)
rating <- rating.table
paper <- paper.table
#Create ratings matrix. Rows = UserID, Columns = PaperID
ratingmat <- dcast(rating, UserID~PaperID, value.var = "rating", na.rm=FALSE)
ratingmat <- as.matrix(ratingmat[,-1]) #remove userIds
ratingmat<-sapply(data.frame(ratingmat),as.numeric)
#Convert rating matrix into a recommenderlab sparse matrix
ratingmat <- as(ratingmat, "realRatingMatrix")
#Normalize the data
ratingmat_norm <- normalize(ratingmat)
#Create Recommender Model. using POPULAR Algorithm
recommender_model <- Recommender(ratingmat, method = "POPULAR")#, param=list(method="Cosine",nn=30))
#save.image(file="RecommendationEngine.rda")
#
recom <- predict(recommender_model, ratingmat[1],n=5)
#Obtain top 10 recommendations for 1st user in dataset
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
print(toJSON(recom_list))
recom_list
View(paper)
setwd("/var/www/html/aasha/R")
.libPaths("packrat/lib/x86_64-pc-linux-gnu/3.3.3")
require(reshape2)
require(recommenderlab)
require(RMySQL)
require(jsonlite)
# MySQL DataBase Connection
connection = dbConnect(MySQL(), user='root', password='root', host='localhost', dbname="aasha")
#Reading Paper & Rating table from the database
rs <- dbSendQuery(connection, "SELECT * FROM rating")
rating.table<-dbFetch(rs,n=-1)
rs <- dbSendQuery(connection, "SELECT * FROM paper")
paper.table<-dbFetch(rs,n=-1)
# Closing the MySQL Connection
dbDisconnect(connection)
rating <- rating.table
paper <- paper.table
#Create ratings matrix. Rows = UserID, Columns = PaperID
ratingmat <- dcast(rating, UserID~PaperID, value.var = "rating", na.rm=FALSE)
ratingmat <- as.matrix(ratingmat[,-1]) #remove userIds
ratingmat<-sapply(data.frame(ratingmat),as.numeric)
#Convert rating matrix into a recommenderlab sparse matrix
ratingmat <- as(ratingmat, "realRatingMatrix")
#Normalize the data
ratingmat_norm <- normalize(ratingmat)
#Create Recommender Model. using POPULAR Algorithm
recommender_model <- Recommender(ratingmat, method = "POPULAR")#, param=list(method="Cosine",nn=30))
#save.image(file="RecommendationEngine.rda")
#
recom <- predict(recommender_model, ratingmat[1],n=5)
#Obtain top 10 recommendations for 1st user in dataset
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
print(recom_list[[1]])
save.image("RecommendationEngine.rda")
print(toJSON(recom_list[[1]]))
